const path = require('path')
const webpack = require('webpack')
const MFS = require('memory-fs')
const clientConfig = require('./webpack.client.config')
const serverConfig = require('./webpack.server.config')
const fs = require('fs')
const VueSSRClientPlugin = require('vue-server-renderer/client-plugin')

module.exports = function hotReload (app, cb) {
    let bundle
    let template
    let clientManifest
    // modify client config to work with hot middleware
    clientConfig.entry.app = ['webpack-hot-middleware/client', clientConfig.entry.app]
    clientConfig.output.filename = '[name].js'
    clientConfig.plugins.push(
        new webpack.HotModuleReplacementPlugin(),
        new webpack.NoEmitOnErrorsPlugin()
    )

    // dev middleware
    const clientCompiler = webpack(clientConfig)
    const devMiddleware = require('webpack-dev-middleware')(clientCompiler, {
        publicPath: clientConfig.output.publicPath,
        stats: {
            colors: true,
            chunks: false
        }
    })
    app.use(devMiddleware)
    clientCompiler.hooks.done.tap('WebpackDevMiddleware', (compilation) => {
        const fs = devMiddleware.fileSystem
        let filePath = path.join(clientConfig.output.path, 'index.html')
        // let clientManifestPath = path.join(clientConfig.output.path, 'vue-ssr-client-manifest.json')
        if (fs.existsSync(filePath)) {
            // clientManifest = JSON.parse(fs.readFileSync(clientManifestPath, 'utf-8'))
            template = fs.readFileSync(filePath, 'utf-8')
            if (bundle) {
                cb(bundle, template, clientManifest)
            }
        }
    })
    // hot middleware
    app.use(require('webpack-hot-middleware')(clientCompiler))

    // watch and update server renderer
    const serverCompiler = webpack(serverConfig)
    const mfs = new MFS()
    serverCompiler.outputFileSystem = mfs
    serverCompiler.watch({}, (err, stats) => {
        if (err) throw err
        stats = stats.toJson()
        stats.errors.forEach(err => console.error(err))
        stats.warnings.forEach(err => console.warn(err))
        // read bundle generated by vue-ssr-webpack-plugin
        const bundlePath = path.join(serverConfig.output.path, 'vue-ssr-bundle.json')
        bundle = JSON.parse(mfs.readFileSync(bundlePath, 'utf-8'))
        let filePath = path.join(clientConfig.output.path, 'index.html')
        if (template) {
            cb(bundle, template, clientManifest)
        }
    })
}
